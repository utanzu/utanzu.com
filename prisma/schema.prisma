// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  name             String?
  username         String?      @unique
  email            String?      @unique
  emailVerified    DateTime?    @map("email_verified")
  image            String?
  accounts         Account[]
  approved         Int          @default(0)
  role             Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  Course           Course[]
  Mentor           Mentor[]
  Mentorship       Mentorship[]
  sentMessages     Message[]    @relation("SentMessages")
  receivedMessages Message[]    @relation("ReceivedMessages")
  Interview        Interview[]

  @@map(name: "users")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @map("user_id")
  type                     String?
  provider                 String
  providerAccountId        String   @map("provider_account_id")
  token_type               String?
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Course {
  id        Int      @id @default(autoincrement())
  ipAddress String?
  title     String?
  topic     String?
  subtopic  String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([subtopic, userId]) // Compound unique constraint
  @@map(name: "courses")
}

model Mentor {
  id           Int          @id @default(autoincrement())
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  ipAddress    String?
  fullName     String
  email        String
  title        String
  linkedin     String
  description  String       @db.LongText
  expertise    String
  profileImage String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Mentorship   Mentorship[]

  @@unique([userId])
  @@map(name: "mentors")
}

model Mentorship {
  id        Int              @id @default(autoincrement())
  mentorId  String
  menteeId  String
  mentor    Mentor           @relation(fields: [mentorId], references: [userId])
  mentee    User             @relation(fields: [menteeId], references: [id])
  ipAddress String?
  title     String
  message   String           @db.LongText
  status    MentorshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  Message   Message[]

  @@unique([mentorId, menteeId])
  @@map(name: "mentorships")
}

enum MentorshipStatus {
  PENDING
  REJECTED
  ONGOING
  COMPLETED
}

model Message {
  id           Int        @id @default(autoincrement())
  mentorshipId Int
  mentorship   Mentorship @relation(fields: [mentorshipId], references: [id])
  senderId     String
  receiverId   String
  sender       User       @relation("SentMessages", fields: [senderId], references: [id])
  receiver     User       @relation("ReceivedMessages", fields: [receiverId], references: [id])
  ipAddress    String?
  title        String
  message      String     @db.LongText
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map(name: "messages")
}

model Interview {
  id        Int      @id @default(autoincrement())
  ipAddress String?
  status    String
  content   String   @db.LongText
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "interviews")
}
